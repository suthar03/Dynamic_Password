/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dynamics;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import static java.lang.Thread.sleep;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Suthar
 */
public class DyR_Adv_Reserved extends javax.swing.JFrame {
String Add="D:/DyPass";
int sec,min,hr,day,dt,month,year;
    /**
     * Creates new form Dy
     */
    public DyR_Adv_Reserved() {
        initComponents();
        this.setLocationRelativeTo(null);
        switcher(login);
        log_exit.setBackground(Color.white);
        log_submit.setBackground(Color.white);
        clck=true;
                    clock(login_crtm);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lyrpnl = new javax.swing.JLayeredPane();
        passsetter = new javax.swing.JPanel();
        setter_passf1_lbl = new javax.swing.JLabel();
        setter_DyThings = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        setter_passf2_lbl = new javax.swing.JLabel();
        setter_passckr_lbl = new javax.swing.JLabel();
        setter_save = new javax.swing.JButton();
        setter_clear = new javax.swing.JButton();
        setter_cancel = new javax.swing.JButton();
        setter_help = new javax.swing.JLabel();
        tmlbl = new javax.swing.JLabel();
        setter_passf1 = new javax.swing.JTextField();
        setter_passf2 = new javax.swing.JTextField();
        setter_passckr = new javax.swing.JPasswordField();
        setter_crtm = new javax.swing.JLabel();
        login = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        log_usrid = new javax.swing.JTextField();
        log_pass = new javax.swing.JPasswordField();
        log_pass_lbl = new javax.swing.JLabel();
        log_submit = new javax.swing.JButton();
        log_exit = new javax.swing.JButton();
        log_usrlog_lbl = new javax.swing.JLabel();
        log_signup = new javax.swing.JLabel();
        log_usr_lbl = new javax.swing.JLabel();
        welcome = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        login_crtm = new javax.swing.JLabel();
        QuickReg = new javax.swing.JPanel();
        Reg_NewUsr_lbl = new javax.swing.JLabel();
        Reg_usrid_lbl = new javax.swing.JLabel();
        Reg_usrid = new javax.swing.JTextField();
        Reg_usrmbl_lbl = new javax.swing.JLabel();
        Reg_usrmbl = new javax.swing.JTextField();
        Reg_otp_lbl = new javax.swing.JLabel();
        Reg_otp = new javax.swing.JTextField();
        Reg_submit = new javax.swing.JButton();
        Reg_cancel = new javax.swing.JButton();
        Reg_clear = new javax.swing.JButton();
        welcome1 = new javax.swing.JLabel();
        Help = new javax.swing.JPanel();
        help_check = new javax.swing.JButton();
        help_clear = new javax.swing.JButton();
        help_close = new javax.swing.JButton();
        helphint_lbl = new javax.swing.JLabel();
        help_tmlbl = new javax.swing.JLabel();
        help_passf1 = new javax.swing.JTextField();
        help_expectedpass = new javax.swing.JTextField();
        help_passckr = new javax.swing.JPasswordField();
        help_crtm = new javax.swing.JLabel();
        help_passf1_lbl = new javax.swing.JLabel();
        Help_DyThings = new javax.swing.JPanel();
        help_lbl = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        help_passf2_lbl = new javax.swing.JLabel();
        help_passckr_lbl = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(51, 255, 51));
        setUndecorated(true);

        lyrpnl.setLayout(new java.awt.CardLayout());

        passsetter.setBackground(new java.awt.Color(255, 204, 150));
        passsetter.setToolTipText("");

        setter_passf1_lbl.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        setter_passf1_lbl.setText("Format for password:");

        setter_DyThings.setBackground(new java.awt.Color(255, 204, 150));

        jLabel6.setBackground(new java.awt.Color(255, 204, 150));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Dynamic Things");

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(255, 204, 150));
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("<yyyy> : Year i.e. 2020\n<MM>   : Month i.e.  12\n<dd>   : Date i.e.   30\n<day>  : Day   i.e. WED\n<hr>   : hours  i.e  02\n<min>  : Minutes i.e 31\n<sec>  : Second i.e. 55\n!!For mathematical ope-\nration use [] and Symb-\nols are :\n<+>    : Addition\n<->    : Substraction\n<*>    : Multiplication");
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout setter_DyThingsLayout = new javax.swing.GroupLayout(setter_DyThings);
        setter_DyThings.setLayout(setter_DyThingsLayout);
        setter_DyThingsLayout.setHorizontalGroup(
            setter_DyThingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setter_DyThingsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(setter_DyThingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        setter_DyThingsLayout.setVerticalGroup(
            setter_DyThingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setter_DyThingsLayout.createSequentialGroup()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE))
        );

        setter_passf2_lbl.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        setter_passf2_lbl.setText("Format for password:");

        setter_passckr_lbl.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        setter_passckr_lbl.setText("Enter Password for current instant:");

        setter_save.setBackground(new java.awt.Color(255, 255, 255));
        setter_save.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        setter_save.setForeground(new java.awt.Color(51, 0, 255));
        setter_save.setText("Save");
        setter_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setter_saveActionPerformed(evt);
            }
        });
        setter_save.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                setter_saveKeyPressed(evt);
            }
        });

        setter_clear.setBackground(new java.awt.Color(255, 255, 255));
        setter_clear.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        setter_clear.setForeground(new java.awt.Color(51, 0, 255));
        setter_clear.setText("Clear");
        setter_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setter_clearActionPerformed(evt);
            }
        });

        setter_cancel.setBackground(new java.awt.Color(255, 255, 255));
        setter_cancel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        setter_cancel.setForeground(new java.awt.Color(51, 0, 255));
        setter_cancel.setText("Cancel");
        setter_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setter_cancelActionPerformed(evt);
            }
        });

        setter_help.setFont(new java.awt.Font("Palatino Linotype", 0, 18)); // NOI18N
        setter_help.setForeground(new java.awt.Color(0, 0, 255));
        setter_help.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        setter_help.setText("Help");
        setter_help.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                setter_helpMouseClicked(evt);
            }
        });

        tmlbl.setText("Time and Date:");

        setter_passf1.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        setter_passf1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                setter_passf1FocusLost(evt);
            }
        });
        setter_passf1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                setter_passf1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                setter_passf1KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                setter_passf1KeyTyped(evt);
            }
        });

        setter_passf2.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        setter_passf2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                setter_passf2KeyPressed(evt);
            }
        });

        setter_passckr.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        setter_passckr.setForeground(new java.awt.Color(204, 51, 0));
        setter_passckr.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                setter_passckrFocusGained(evt);
            }
        });
        setter_passckr.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                setter_passckrKeyPressed(evt);
            }
        });

        setter_crtm.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        setter_crtm.setText("Wed::01/01/2021::10:10:10");

        javax.swing.GroupLayout passsetterLayout = new javax.swing.GroupLayout(passsetter);
        passsetter.setLayout(passsetterLayout);
        passsetterLayout.setHorizontalGroup(
            passsetterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(passsetterLayout.createSequentialGroup()
                .addContainerGap(187, Short.MAX_VALUE)
                .addComponent(setter_cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(passsetterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(passsetterLayout.createSequentialGroup()
                        .addGap(131, 156, Short.MAX_VALUE)
                        .addComponent(tmlbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(setter_crtm)
                        .addContainerGap())
                    .addGroup(passsetterLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                        .addComponent(setter_clear, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                        .addComponent(setter_save, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(223, Short.MAX_VALUE))))
            .addGroup(passsetterLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(passsetterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(passsetterLayout.createSequentialGroup()
                        .addComponent(setter_passf2_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(setter_passf2, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(passsetterLayout.createSequentialGroup()
                        .addComponent(setter_passf1_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(setter_passf1, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, passsetterLayout.createSequentialGroup()
                        .addComponent(setter_passckr_lbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(setter_passckr, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(passsetterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(passsetterLayout.createSequentialGroup()
                    .addContainerGap(521, Short.MAX_VALUE)
                    .addComponent(setter_help)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(setter_DyThings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );
        passsetterLayout.setVerticalGroup(
            passsetterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(passsetterLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(passsetterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setter_crtm, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                    .addComponent(tmlbl, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE))
                .addGap(49, 49, 49)
                .addGroup(passsetterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setter_passf1_lbl)
                    .addComponent(setter_passf1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(passsetterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setter_passf2_lbl)
                    .addComponent(setter_passf2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(passsetterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setter_passckr_lbl)
                    .addComponent(setter_passckr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(passsetterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setter_save, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setter_clear, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setter_cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(passsetterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(passsetterLayout.createSequentialGroup()
                    .addGap(95, 95, 95)
                    .addGroup(passsetterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(passsetterLayout.createSequentialGroup()
                            .addGap(65, 65, 65)
                            .addComponent(setter_help))
                        .addComponent(setter_DyThings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(85, Short.MAX_VALUE)))
        );

        lyrpnl.add(passsetter, "card2");

        login.setBackground(new java.awt.Color(255, 204, 51));

        jPanel2.setBackground(new java.awt.Color(255, 204, 51));

        log_usrid.setFont(new java.awt.Font("Serif", 0, 24)); // NOI18N
        log_usrid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                log_usridKeyPressed(evt);
            }
        });

        log_pass.setFont(new java.awt.Font("Serif", 0, 24)); // NOI18N
        log_pass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                log_passKeyPressed(evt);
            }
        });

        log_pass_lbl.setFont(new java.awt.Font("Serif", 1, 18)); // NOI18N
        log_pass_lbl.setForeground(new java.awt.Color(255, 255, 255));
        log_pass_lbl.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        log_pass_lbl.setText("Enter Password :");

        log_submit.setBackground(new java.awt.Color(255, 255, 255));
        log_submit.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        log_submit.setForeground(new java.awt.Color(0, 0, 255));
        log_submit.setText("Submit");
        log_submit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        log_submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                log_submitActionPerformed(evt);
            }
        });
        log_submit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                log_submitKeyPressed(evt);
            }
        });

        log_exit.setBackground(new java.awt.Color(255, 255, 255));
        log_exit.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        log_exit.setForeground(new java.awt.Color(51, 0, 255));
        log_exit.setText("Exit");
        log_exit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        log_exit.setPreferredSize(new java.awt.Dimension(73, 25));
        log_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                log_exitActionPerformed(evt);
            }
        });

        log_usrlog_lbl.setFont(new java.awt.Font("Gabriola", 1, 24)); // NOI18N
        log_usrlog_lbl.setForeground(new java.awt.Color(255, 255, 255));
        log_usrlog_lbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        log_usrlog_lbl.setText("User Login");

        log_signup.setFont(new java.awt.Font("SWItalt", 0, 14)); // NOI18N
        log_signup.setForeground(new java.awt.Color(0, 51, 255));
        log_signup.setText("Sign up?");
        log_signup.setNextFocusableComponent(Reg_usrid);
        log_signup.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                log_signupMouseClicked(evt);
            }
        });

        log_usr_lbl.setFont(new java.awt.Font("Serif", 1, 18)); // NOI18N
        log_usr_lbl.setForeground(new java.awt.Color(255, 255, 255));
        log_usr_lbl.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        log_usr_lbl.setText("User ID:");
        log_usr_lbl.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                log_usr_lblFocusGained(evt);
            }
        });

        welcome.setFont(new java.awt.Font("Comic Sans MS", 1, 24)); // NOI18N
        welcome.setForeground(new java.awt.Color(0, 0, 255));
        welcome.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        welcome.setText("Welcome Back");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(log_pass_lbl)
                            .addComponent(log_usr_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(log_signup)
                                .addComponent(log_pass, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                                .addComponent(log_usrid))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(log_exit, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(log_submit, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(welcome, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(log_usrlog_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 15, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(welcome)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(log_usrlog_lbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(log_usrid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(log_usr_lbl))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(log_pass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(log_pass_lbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(log_signup)
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(log_submit, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(log_exit, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        log_usrid.getAccessibleContext().setAccessibleParent(this);

        jLabel1.setText("Logo");

        login_crtm.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        login_crtm.setText("Wed::01/01/2021::10:10:10");

        javax.swing.GroupLayout loginLayout = new javax.swing.GroupLayout(login);
        login.setLayout(loginLayout);
        loginLayout.setHorizontalGroup(
            loginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loginLayout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(loginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(login_crtm))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        loginLayout.setVerticalGroup(
            loginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loginLayout.createSequentialGroup()
                .addGroup(loginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(loginLayout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(login_crtm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(loginLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        lyrpnl.add(login, "card2");

        QuickReg.setBackground(new java.awt.Color(255, 204, 100));
        QuickReg.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                QuickRegFocusGained(evt);
            }
        });

        Reg_NewUsr_lbl.setFont(new java.awt.Font("Gabriola", 1, 24)); // NOI18N
        Reg_NewUsr_lbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Reg_NewUsr_lbl.setText("New User Registration");

        Reg_usrid_lbl.setFont(new java.awt.Font("Serif", 1, 16)); // NOI18N
        Reg_usrid_lbl.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        Reg_usrid_lbl.setText("User ID:");
        Reg_usrid_lbl.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Reg_usrid_lblFocusGained(evt);
            }
        });

        Reg_usrid.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Reg_usridFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                Reg_usridFocusLost(evt);
            }
        });
        Reg_usrid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Reg_usridKeyPressed(evt);
            }
        });

        Reg_usrmbl_lbl.setFont(new java.awt.Font("Serif", 1, 16)); // NOI18N
        Reg_usrmbl_lbl.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        Reg_usrmbl_lbl.setText("Mobile No:");

        Reg_usrmbl.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Reg_usrmblKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Reg_usrmblKeyTyped(evt);
            }
        });

        Reg_otp_lbl.setFont(new java.awt.Font("Serif", 1, 16)); // NOI18N
        Reg_otp_lbl.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        Reg_otp_lbl.setText("OTP:");

        Reg_otp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Reg_otpKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Reg_otpKeyTyped(evt);
            }
        });

        Reg_submit.setBackground(new java.awt.Color(255, 255, 255));
        Reg_submit.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Reg_submit.setForeground(new java.awt.Color(51, 0, 255));
        Reg_submit.setText("Sumbit");
        Reg_submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Reg_submitActionPerformed(evt);
            }
        });
        Reg_submit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Reg_submitKeyPressed(evt);
            }
        });

        Reg_cancel.setBackground(new java.awt.Color(255, 255, 255));
        Reg_cancel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Reg_cancel.setForeground(new java.awt.Color(51, 0, 255));
        Reg_cancel.setText("Cancel");
        Reg_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Reg_cancelActionPerformed(evt);
            }
        });

        Reg_clear.setBackground(new java.awt.Color(255, 255, 255));
        Reg_clear.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Reg_clear.setForeground(new java.awt.Color(51, 0, 255));
        Reg_clear.setText("Clear");
        Reg_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Reg_clearActionPerformed(evt);
            }
        });

        welcome1.setFont(new java.awt.Font("Comic Sans MS", 1, 24)); // NOI18N
        welcome1.setForeground(new java.awt.Color(0, 0, 255));
        welcome1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        welcome1.setText("!!! Welcome !!!");

        javax.swing.GroupLayout QuickRegLayout = new javax.swing.GroupLayout(QuickReg);
        QuickReg.setLayout(QuickRegLayout);
        QuickRegLayout.setHorizontalGroup(
            QuickRegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Reg_NewUsr_lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(QuickRegLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(QuickRegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(QuickRegLayout.createSequentialGroup()
                        .addComponent(welcome1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(QuickRegLayout.createSequentialGroup()
                        .addGap(0, 198, Short.MAX_VALUE)
                        .addGroup(QuickRegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(QuickRegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, QuickRegLayout.createSequentialGroup()
                                    .addComponent(Reg_otp_lbl)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(Reg_otp, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(QuickRegLayout.createSequentialGroup()
                                    .addGroup(QuickRegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(Reg_usrmbl_lbl, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(Reg_usrid_lbl, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(QuickRegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(Reg_usrmbl)
                                        .addComponent(Reg_usrid, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(QuickRegLayout.createSequentialGroup()
                                .addComponent(Reg_cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(69, 69, 69)
                                .addComponent(Reg_clear, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(68, 68, 68)
                                .addComponent(Reg_submit, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(199, Short.MAX_VALUE))))
        );
        QuickRegLayout.setVerticalGroup(
            QuickRegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(QuickRegLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(welcome1)
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(Reg_NewUsr_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(QuickRegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Reg_usrid_lbl)
                    .addComponent(Reg_usrid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(QuickRegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Reg_usrmbl_lbl)
                    .addComponent(Reg_usrmbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(QuickRegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Reg_otp_lbl)
                    .addComponent(Reg_otp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 88, Short.MAX_VALUE)
                .addGroup(QuickRegLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Reg_submit, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Reg_cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Reg_clear, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Reg_usrid.getAccessibleContext().setAccessibleParent(this);

        lyrpnl.add(QuickReg, "card4");

        Help.setBackground(new java.awt.Color(204, 255, 51));

        help_check.setBackground(new java.awt.Color(255, 255, 255));
        help_check.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        help_check.setForeground(new java.awt.Color(51, 0, 255));
        help_check.setText("Check");
        help_check.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                help_checkActionPerformed(evt);
            }
        });

        help_clear.setBackground(new java.awt.Color(255, 255, 255));
        help_clear.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        help_clear.setForeground(new java.awt.Color(51, 0, 255));
        help_clear.setText("Clear");

        help_close.setBackground(new java.awt.Color(255, 255, 255));
        help_close.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        help_close.setForeground(new java.awt.Color(51, 0, 255));
        help_close.setText("Close");
        help_close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                help_closeActionPerformed(evt);
            }
        });

        helphint_lbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        helphint_lbl.setText("For example");
        helphint_lbl.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        helphint_lbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                helphint_lblMouseClicked(evt);
            }
        });

        help_tmlbl.setText("Time and Date:");

        help_passf1.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        help_passf1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                help_passf1KeyPressed(evt);
            }
        });

        help_expectedpass.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        help_expectedpass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                help_expectedpassKeyPressed(evt);
            }
        });

        help_passckr.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        help_passckr.setForeground(new java.awt.Color(204, 51, 0));
        help_passckr.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                help_passckrKeyPressed(evt);
            }
        });

        help_crtm.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        help_crtm.setText("Wed::01/01/2021::10:10:10");

        help_passf1_lbl.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        help_passf1_lbl.setText("Coorect password of format is :");

        Help_DyThings.setBackground(new java.awt.Color(255, 204, 150));

        help_lbl.setBackground(new java.awt.Color(255, 204, 150));
        help_lbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        help_lbl.setText("Dynamic Things");

        jTextArea2.setEditable(false);
        jTextArea2.setBackground(new java.awt.Color(255, 204, 150));
        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jTextArea2.setText("<yyyy> : Year i.e. 2020\n<MM>   : Month i.e.  12\n<dd>   : Date i.e.   30\n<day>  : Day   i.e. WED\n<hr>   : hours  i.e  02\n<min>  : Minutes i.e 31\n<sec>  : Second i.e. 55\n!!For mathematical ope-\nration use [] and Symb-\nols are :\n<+>    : Addition\n<->    : Substraction\n<*>    : Multiplication");
        jScrollPane2.setViewportView(jTextArea2);

        javax.swing.GroupLayout Help_DyThingsLayout = new javax.swing.GroupLayout(Help_DyThings);
        Help_DyThings.setLayout(Help_DyThingsLayout);
        Help_DyThingsLayout.setHorizontalGroup(
            Help_DyThingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
            .addComponent(help_lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        Help_DyThingsLayout.setVerticalGroup(
            Help_DyThingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Help_DyThingsLayout.createSequentialGroup()
                .addComponent(help_lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        help_passf2_lbl.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        help_passf2_lbl.setText("Format for password:");

        help_passckr_lbl.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        help_passckr_lbl.setText("Enter Password for current instant:");

        javax.swing.GroupLayout HelpLayout = new javax.swing.GroupLayout(Help);
        Help.setLayout(HelpLayout);
        HelpLayout.setHorizontalGroup(
            HelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HelpLayout.createSequentialGroup()
                .addGroup(HelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(HelpLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(help_close, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(help_clear, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(help_check, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(HelpLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(help_tmlbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(help_crtm))
                    .addGroup(HelpLayout.createSequentialGroup()
                        .addContainerGap(18, Short.MAX_VALUE)
                        .addGroup(HelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(HelpLayout.createSequentialGroup()
                                .addComponent(help_passckr_lbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(help_passckr, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(HelpLayout.createSequentialGroup()
                                .addComponent(help_passf1_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(help_expectedpass, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(HelpLayout.createSequentialGroup()
                                .addComponent(help_passf2_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(HelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(helphint_lbl)
                                    .addComponent(help_passf1, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                        .addComponent(Help_DyThings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        HelpLayout.setVerticalGroup(
            HelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, HelpLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(HelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(help_crtm, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(help_tmlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(HelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(HelpLayout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(HelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(help_passf1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(help_passf2_lbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(helphint_lbl)
                        .addGap(22, 22, 22)
                        .addGroup(HelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(help_passckr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(help_passckr_lbl))
                        .addGap(44, 44, 44)
                        .addGroup(HelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(help_expectedpass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(help_passf1_lbl)))
                    .addComponent(Help_DyThings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(HelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(help_check, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(help_clear, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(help_close, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        lyrpnl.add(Help, "card5");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lyrpnl, javax.swing.GroupLayout.DEFAULT_SIZE, 816, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(lyrpnl))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
public String CodeValue(String str){
        String res;
        Calendar cal = new GregorianCalendar();
    day = cal.get(Calendar.DAY_OF_WEEK);
    dt = cal.get(Calendar.DAY_OF_MONTH);
        month = cal.get(Calendar.MONTH);
        year = cal.get(Calendar.YEAR);
        
        sec = cal.get(Calendar.SECOND);
        min = cal.get(Calendar.MINUTE);
        hr = cal.get(Calendar.HOUR);
         if(str.compareToIgnoreCase("MM")==0)
                        res=String.format("%02d", ++month);
                        else{
                            if(str.compareToIgnoreCase("yyyy")==0)
                                res=String.format("%04d", year);
                            else{
                                if(str.compareToIgnoreCase("dd")==0)
                                    res=String.format("%02d", dt);
                                else{
                                    if(str.compareToIgnoreCase("hr")==0)
                                        res=String.format("%02d", hr);
                                    else{
                                        if(str.compareToIgnoreCase("min")==0)
                                            res=String.format("%02d", min);
                                        else{
                                            if(str.compareToIgnoreCase("sec")==0)
                                                res=String.format("%02d", sec);
                                            else{
                                                if(str.compareToIgnoreCase("day")==0)
                                                res=DayStr(day);
                                            else{
                                                res=str;
                                            }
                                            }
                                        }
                                    }
                                }
                            }
                        }
        return res;
    }
    public String StringValue(String form){
        String res="",shortcd="";
       for(int i=0;i<form.length();++i){
        if(form.charAt(i)=='<'||form.charAt(i)=='>'){
            if(i!=0){
                //Go for codevalue
                res+=CodeValue(shortcd);
                shortcd="";
            }
            
        }else{
            shortcd+=form.charAt(i);
        }   
       }
       res+=CodeValue(shortcd);
       //System.out.println("String valued::"+res);
        return res;
    }
    public String  passValue(String intstr){
        //System.out.println("String Int Value passed:"+intstr);
        String res="",curr="";int br=-1;
      for(int i=0;i<intstr.length();++i){
          if(br==0&&i!=0){
              //eval miust be calcutated
              System.out.println("Going for eval::"+curr);
              res+=String.valueOf(eval(curr));
              curr="";
                      br=-1;--i; continue;
          }else{
              if(intstr.charAt(i)=='['){ br=1;continue;}
              else{
                  if(intstr.charAt(i)==']') {br=0; continue;}
              }
          if(br==-1){
          res+=intstr.charAt(i);
          continue;
          }
          
          }
          curr+=intstr.charAt(i);
      }  
      System.out.println("Just Before::"+res);
      if(br==0){
              //eval miust be calcutated
              System.out.println("Going for eval::"+curr);
              res+=String.valueOf(eval(curr));
              curr="";
                      br=-1;
          }else{
          res=res+curr;
      }
        return res;
    }
    public  int eval( String str) {
    return new Object() {
        int pos = -1, ch;

        void nextChar() {
            ch = (++pos < str.length()) ? str.charAt(pos) : -1;
        }

        boolean eat(int charToEat) {
            while (ch == ' ') nextChar();
            if (ch == charToEat) {
                nextChar();
                return true;
            }
            return false;
        }

        int parse() {
            nextChar();
            int x =  parseExpression();
            if (pos < str.length()) throw new RuntimeException("Unexpected: " + (char)ch);
            return x;
        }

        // Grammar:
        // expression = term | expression `+` term | expression `-` term
        // term = factor | term `*` factor | term `/` factor
        // factor = `+` factor | `-` factor | `(` expression `)`
        //        | number | functionName factor | factor `^` factor

        int parseExpression() {
            int x = parseTerm();
            for (;;) {
                if      (eat('+')) x += parseTerm(); // addition
                else if (eat('-')) x -= parseTerm(); // subtraction
                else return x;
            }
        }

        int parseTerm() {
            int x = parseFactor();
            for (;;) {
                if      (eat('*')) x *= parseFactor(); // multiplication
                else if (eat('/')) x /= parseFactor(); // division
                else return x;
            }
        }

        int parseFactor() {
            if (eat('+')) return parseFactor(); // unary plus
            if (eat('-')) return -parseFactor(); // unary minus

            int x;
            int startPos = this.pos;
            if (eat('(')) { // parentheses
                x = parseExpression();
                eat(')');
            } else if ((ch >= '0' && ch <= '9') || ch == '.') { // numbers
                while ((ch >= '0' && ch <= '9') || ch == '.') nextChar();
                x = Integer.parseInt(str.substring(startPos, this.pos));
            } else  {
                throw new RuntimeException("Unexpected: " + (char)ch);
            }

            if (eat('^')) x = (int) Math.pow(x, parseFactor()); // exponentiation

            return x;
        }
    }.parse();
}
public String encoderr(String gh){
    String cp="";
    Calendar cal = new GregorianCalendar();
    day = cal.get(Calendar.DAY_OF_WEEK);
    dt = cal.get(Calendar.DAY_OF_MONTH);
        month = cal.get(Calendar.MONTH);
        year = cal.get(Calendar.YEAR);
        
        sec = cal.get(Calendar.SECOND);
        min = cal.get(Calendar.MINUTE);
        hr = cal.get(Calendar.HOUR);
        for(int i=0;i<gh.length();++i){
            if(gh.charAt(i)=='<'){ //Something going to start
                String str="";
                for(++i;i<gh.length();++i){
                    if(gh.charAt(i)=='>'){   
                        if(str.compareToIgnoreCase("MM")==0)
                        cp+=String.valueOf(month);
                        else{
                            if(str.compareToIgnoreCase("yyyy")==0)
                                cp+=String.valueOf(year);
                            else{
                                if(str.compareToIgnoreCase("dd")==0)
                                    cp+=String.valueOf(dt);
                                else{
                                    if(str.compareToIgnoreCase("hr")==0)
                                        cp+=String.valueOf(hr);
                                    else{
                                        if(str.compareToIgnoreCase("min")==0)
                                            cp+=String.valueOf(min);
                                        else{
                                            if(str.compareToIgnoreCase("sec")==0)
                                                cp+=String.valueOf(sec);
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    
                    }
                    else{
                        str+=gh.charAt(i);
                    }
                }
            }else{
               cp+=gh.charAt(i);
            }
        }
    //passf1.setText(day+"::"+dt+"/"+month+"/"+year+"::"+hr+":"+min+":"+sec);
    return cp;
}
public String DayStr(int i){
    String DDD="";
    switch(i){
        case 1: DDD="SUN"; break;
        case 2: DDD="MON"; break;
        case 3: DDD="TUE"; break;
        case 4: DDD="WED"; break;
        case 5: DDD="THU"; break;
        case 6: DDD="FRI"; break;
        case 7: DDD="SAT"; break;
            
    }
    return DDD;
}
boolean clck=true;
public void clock(JLabel lbl){
    
    Thread clock = new Thread(){
        public void run()
            {
            try {
                for(;clck;){
                Calendar cal = new GregorianCalendar();
        day = cal.get(Calendar.DAY_OF_WEEK);
                dt = cal.get(Calendar.DAY_OF_MONTH);
        month = cal.get(Calendar.MONTH);
        year = cal.get(Calendar.YEAR);
        
        sec = cal.get(Calendar.SECOND);
        min = cal.get(Calendar.MINUTE);
        hr = cal.get(Calendar.HOUR);
        lbl.setText(DayStr(day)+"::"+String.format("%02d", dt)+"/"+String.format("%02d", ++month)+"/"+String.format("%02d", year)+"::"+String.format("%02d", hr)+":"+String.format("%02d", min)+":"+String.format("%02d", sec));
        System.out.println(lbl.getName()+"  "+dt+"/"+month+"/"+year+"::"+hr+":"+min+":"+sec);
        
                sleep(1000);
                }
            } catch (InterruptedException ex) {
                System.out.println("Some Distrubted me::");
                Logger.getLogger(DyR_Adv_Reserved.class.getName()).log(Level.SEVERE, null, ex);
            }
            }
    };
    
    clock.start();
            
       
    
}
public void switcher(JPanel pnl){
    lyrpnl.removeAll();
    lyrpnl.add(pnl);
    lyrpnl.repaint();
    lyrpnl.revalidate();
    
    
}


    private void log_submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_log_submitActionPerformed
        String passorg = "";
       if(!log_usrid.getText().isEmpty()){ File fl = new File(Add+"/"+log_usrid.getText()+"/profile.txt");
    if(fl.exists()){
        try {
        passorg = GetLine.mainn(Add+"/"+log_usrid.getText()+"/profile.txt", 2);
        System.out.println("passorg value "+passorg);
        System.out.println("String value "+StringValue(passorg));
            String passexptd=passValue(StringValue(passorg));
            String entpass=new String(log_pass.getPassword());
            if(entpass.equals(passexptd)){
                
                            JLabel label = new JLabel("Login Successful");
                        label.setFont(new Font("Arial", Font.BOLD, 18));
                        JOptionPane.showMessageDialog(null,label,"Successful",JOptionPane.INFORMATION_MESSAGE);
                        clck =false;
                        System.exit(1);
                      
                System.out.println("You have passed the all thing all you dynamic setted ::)");
            }else{
                System.out.println("Password in not correct !!");
                JLabel label = new JLabel("Password is incorrect !!!");
    label.setFont(new Font("Arial", Font.BOLD, 18));
    JOptionPane.showMessageDialog(this,label,"ERROR",JOptionPane.WARNING_MESSAGE);
            }
    } catch (IOException ex) {
         JLabel label = new JLabel("User not exist Or something else is there");
    label.setFont(new Font("Arial", Font.BOLD, 18));
    JOptionPane.showMessageDialog(this,label,"ERROR",JOptionPane.WARNING_MESSAGE);
       
    }
    }else{
        JLabel label = new JLabel("User not exists !!!");
    label.setFont(new Font("Arial", Font.BOLD, 18));
    JOptionPane.showMessageDialog(this,label,"ERROR",JOptionPane.WARNING_MESSAGE);
       
    }
        
    }else{
JLabel label = new JLabel("Fill up the things approperiately");
    label.setFont(new Font("Arial", Font.BOLD, 18));
    JOptionPane.showMessageDialog(this,label,"ERROR",JOptionPane.WARNING_MESSAGE);
}
    }//GEN-LAST:event_log_submitActionPerformed

    private void log_passKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_log_passKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            log_submit.doClick();
        }
    }//GEN-LAST:event_log_passKeyPressed

    private void log_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_log_exitActionPerformed
        System.exit(1);
    }//GEN-LAST:event_log_exitActionPerformed

    private void log_signupMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_log_signupMouseClicked
clck =false;
        switcher(QuickReg);
        Reg_otp.setText("");
        Reg_otp.setVisible(false);
        Reg_otp_lbl.setVisible(false);
        Reg_usrid.requestFocus();
        
    }//GEN-LAST:event_log_signupMouseClicked

    private void log_usridKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_log_usridKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER)
            log_pass.requestFocus();
    }//GEN-LAST:event_log_usridKeyPressed
public boolean checkrep(String cd){
    boolean res = false;
    try {
            Scanner scn = new Scanner(new File("src/dynamics/charset.txt"));
            while(scn.hasNext()){
                String str=scn.next();
                
                str=str.substring(1,str.length()-1);
                ////System.out.println("Sub:"+str+"  Res:"+cd.compareToIgnoreCase(str)+"  cd:"+cd);
               if(cd.compareToIgnoreCase(str)==0){
                   res=true;
                   break;
               }
            }
        } catch (FileNotFoundException ex) {
            System.out.println(new File("src/charset.txt").getAbsolutePath());
            Logger.getLogger(rough.class.getName()).log(Level.SEVERE, null, ex);
        }
    //System.out.println("CheckRep for: "+cd+" ::"+res);
    return(res);
}
public boolean ismathematical(String cd){
    boolean res=false;
    if(cd.compareToIgnoreCase("+")==0||(cd.compareToIgnoreCase("-")==0||cd.compareToIgnoreCase("*")==0))
        res=true;
    //System.out.println("Is Mathematical for: "+cd+" ::"+res);
    return res;
}
public boolean mathematicalvalidity(String Formatstr,String tgstr,int ind){
   //System.out.println("Format::"+Formatstr+" Tagstr:::"+tgstr+"  ind::::"+ind);
    boolean res= true;
    String str1="",str2="";
    for(int l=ind-3-tgstr.length();l>=0;--l){
        //System.out.println("Charcter at ::"+l+" ::"+Formatstr.charAt(l));
        if(Formatstr.charAt(l)=='<'){
            //System.out.println("Mathe:::"+str1);
            if(!checkrep(str1)) res=false;
            break;
        }else{
            str1=Formatstr.charAt(l)+str1;
        }
    }
    for(int l=ind+2;l<Formatstr.length();++l){
        if(Formatstr.charAt(l)=='>'){
            if(!checkrep(str2)) res=false;
            break;
        }else{
            str2=str2+Formatstr.charAt(l);
        }
    }
    //System.out.println("MathematicalValidity for: "+tgstr+" ::"+res);
    return res;
}
public boolean validity(String str){        //<dd><MM><+><yyyy>
    boolean res= true;
    for(int i=0;i<str.length();++i){
        char a = str.charAt(i);
        if(a=='<'){ //New tag is going on...
            String nstr="";
            for(++i;i<str.length();++i){
            if(str.charAt(i)!='>'){
                nstr+=str.charAt(i);
            }else{
                if(checkrep(nstr)){ //Atleast code valid
                if(ismathematical(nstr)){
                    if(!mathematicalvalidity(str,nstr,i)){
                    res=false; 
                    //System.out.println("mathematically Not correct");
                    }else{
                        //System.out.println("mathematically correct");
                    }
                    
                }
                }
                else{//Code is not valid
                    res=false;
                    //System.out.println(nstr+"  Code is not valid");
                }
               break;//Single tag/code reading completed
            }
        }
        }
    }
    return res;
}
public boolean bracketbalance(String str){
    boolean res= false;
    int count1=0,count2=0;
    for(int i=0;i<str.length();++i){
        switch(str.charAt(i)){
            case '[': ++count1; break;
            case ']': --count1; break;
            case '<': ++count2; break;
            case '>': --count2; break;
        }
    }
    if(count1==0&&count2==0)
        res = true;
    return res;
}
    private void setter_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setter_saveActionPerformed
        if(setter_passf1.getText().equals(setter_passf2.getText())&&!setter_passf1.getText().isEmpty()){
            if(validity(setter_passf1.getText())&&bracketbalance(setter_passf2.getText())){
                System.out.println("String value "+StringValue(setter_passf1.getText()));
                String passexptd=passValue(StringValue(setter_passf1.getText()));
                String entpass=new String(setter_passckr.getPassword());
                if(entpass.equals(passexptd)){
                    try {
                        
                        //PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(baseadd+"/userID.txt", true)));
                        dirCreate.mainn(Add, Reg_usrid.getText());
                        PrintWriter out = new PrintWriter(new OutputStreamWriter(new FileOutputStream(Add+"/"+Reg_usrid.getText()+"/profile.txt", true), "UTF-8"));
                        out.println(Reg_usrid.getText());
                        out.println(setter_passf1.getText());// password
                        out.println(Reg_usrmbl.getText());
                        out.close();
                        JLabel label = new JLabel("User  Added Successfully ");
                        label.setFont(new Font("Arial", Font.BOLD, 18));
                        JOptionPane.showMessageDialog(null,label,"ERROR",JOptionPane.INFORMATION_MESSAGE);
                    } catch (IOException p) {
                        JLabel label = new JLabel("User Not Added!!! "+p);
                        label.setFont(new Font("Arial", Font.BOLD, 18));
                        JOptionPane.showMessageDialog(null,label,"ERROR",JOptionPane.ERROR_MESSAGE);
                        //errmessage.mainn("User Not Added!!! Error0005", 400, 200);
                    }
                   clck=false;
                   switcher(login);
                   Reg_otp.setText("");
                   Reg_usrid.setText("");
                   Reg_usrmbl.setText("");
                   setter_passf1.setText("");
        setter_passf2.setText("");
        setter_passckr.setText("");
        setter_passf1.setEnabled(true);
        setter_passf2.setEnabled(true);
        try{
            sleep(1000);
        } catch (InterruptedException ex) {
                System.out.println("Some Distrubted me::");
                Logger.getLogger(DyR_Adv_Reserved.class.getName()).log(Level.SEVERE, null, ex);
            }
        clck=true;
        clock(login_crtm);             
        System.out.println("You have passed the all thing all you dynamic setted ::)");
                }else{
                    System.out.println("Entered pass:"+entpass+"   Expected:"+passexptd);
                    JLabel label = new JLabel("Password is incorrect !!!");
                    label.setFont(new Font("Arial", Font.BOLD, 18));
                    JOptionPane.showMessageDialog(this,label,"ERROR",JOptionPane.WARNING_MESSAGE);
                }
            }else{
                setter_passf1.requestFocus();
                JLabel label = new JLabel("Password formate is not valid !!!");
                label.setFont(new Font("Arial", Font.BOLD, 18));
                JOptionPane.showMessageDialog(this,label,"ERROR",JOptionPane.WARNING_MESSAGE);
            }
        }else{
            JLabel label = new JLabel("Format are not matching with each other Or empty");
            label.setFont(new Font("Arial", Font.BOLD, 18));
            JOptionPane.showMessageDialog(this,label,"ERROR",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_setter_saveActionPerformed

    private void setter_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setter_clearActionPerformed
        setter_passf1.setText("");
        setter_passf2.setText("");
        setter_passckr.setText("");
        setter_passf1.setEnabled(true);
        setter_passf2.setEnabled(true);
    }//GEN-LAST:event_setter_clearActionPerformed

    private void setter_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setter_cancelActionPerformed
        clck=false;
        switcher(login);
        try{
            sleep(1000);
        } catch (InterruptedException ex) {
                System.out.println("Some Distrubted me::");
                Logger.getLogger(DyR_Adv_Reserved.class.getName()).log(Level.SEVERE, null, ex);
            }
        clck=true;
        clock(login_crtm);
    }//GEN-LAST:event_setter_cancelActionPerformed

    private void setter_passf1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_setter_passf1FocusLost

    }//GEN-LAST:event_setter_passf1FocusLost

    private void setter_passf1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_setter_passf1KeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            setter_passf2.requestFocus();
        }
    }//GEN-LAST:event_setter_passf1KeyPressed

    private void setter_passf1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_setter_passf1KeyReleased
      
    }//GEN-LAST:event_setter_passf1KeyReleased

    private void setter_passf1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_setter_passf1KeyTyped

    }//GEN-LAST:event_setter_passf1KeyTyped

    private void setter_passf2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_setter_passf2KeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            setter_passckr.requestFocus();
        }
    }//GEN-LAST:event_setter_passf2KeyPressed

    private void setter_passckrFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_setter_passckrFocusGained
        setter_passf1.setEnabled(false);
        setter_passf2.setEnabled(false);
    }//GEN-LAST:event_setter_passckrFocusGained

    private void setter_passckrKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_setter_passckrKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            setter_save.doClick();
        }
    }//GEN-LAST:event_setter_passckrKeyPressed

    private void Reg_usridFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Reg_usridFocusLost
        // check for existance of userid
        File fl = new File(Add+"/"+Reg_usrid.getText()+"/profile.txt");
        if(fl.exists()){
            Reg_usrid.requestFocus();
            JLabel label = new JLabel("User already for the id :"+log_usrid.getText());
            label.setFont(new Font("Arial", Font.BOLD, 18));
            JOptionPane.showMessageDialog(this,label,"ERROR",JOptionPane.WARNING_MESSAGE);
            //System.out.println("User already for the id :"+log_usrid.getText());
            
        }
    }//GEN-LAST:event_Reg_usridFocusLost

    private void Reg_usridKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Reg_usridKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            Reg_usrmbl.requestFocus();
        }
    }//GEN-LAST:event_Reg_usridKeyPressed

    private void Reg_usrmblKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Reg_usrmblKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            Reg_submit.doClick();
            Reg_otp.requestFocus();
        }
    }//GEN-LAST:event_Reg_usrmblKeyPressed

    private void Reg_otpKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Reg_otpKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            Reg_submit.doClick();
        }
    }//GEN-LAST:event_Reg_otpKeyPressed

    private void Reg_submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Reg_submitActionPerformed
        if(!Reg_usrid.getText().isEmpty()&&!Reg_usrmbl.getText().isEmpty()){
            Reg_otp.setVisible(true);
            Reg_otp_lbl.setVisible(true);
            Reg_usrid.setEnabled(false);
            Reg_usrmbl.setEnabled(false);
            if(!Reg_otp.getText().isEmpty()&&Reg_otp.isVisible()){
                //Move to setup the password
                if(true){//check whether OTP is correct or not
                    
                    switcher(passsetter);
                    clck=true;
                    clock(setter_crtm);
                    
                }
            }
        }else{
            Reg_usrid.requestFocus();
            JLabel label = new JLabel("Enter valid userid And Mobile Number !!!");
                label.setFont(new Font("Arial", Font.BOLD, 18));
                JOptionPane.showMessageDialog(this,label,"ERROR",JOptionPane.WARNING_MESSAGE);
           
        }
    }//GEN-LAST:event_Reg_submitActionPerformed

    private void Reg_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Reg_cancelActionPerformed
clck=true;
clock(login_crtm);
        Reg_otp.setText("");
        Reg_usrid.setText("");
        Reg_usrmbl.setText("");
        switcher(login);
    }//GEN-LAST:event_Reg_cancelActionPerformed

    private void Reg_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Reg_clearActionPerformed
        Reg_otp.setVisible(false);
        Reg_otp_lbl.setVisible(false);
        Reg_usrid.setEnabled(true);
        Reg_usrmbl.setEnabled(true);
        Reg_otp_lbl.setText("");
        Reg_usrid.setText("");
        Reg_usrmbl.setText("");
        Reg_usrid.requestFocus();

    }//GEN-LAST:event_Reg_clearActionPerformed

    private void QuickRegFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_QuickRegFocusGained
System.out.println("Focus Gained");
        Reg_otp.setVisible(false);
        Reg_otp_lbl.setVisible(false);
    }//GEN-LAST:event_QuickRegFocusGained

    private void Reg_usridFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Reg_usridFocusGained
        Reg_otp.setVisible(false);
        Reg_otp_lbl.setVisible(false);
    }//GEN-LAST:event_Reg_usridFocusGained

    private void log_usr_lblFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_log_usr_lblFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_log_usr_lblFocusGained

    private void Reg_usrid_lblFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Reg_usrid_lblFocusGained
        Reg_otp.setVisible(false);
        Reg_otp_lbl.setVisible(false);
    }//GEN-LAST:event_Reg_usrid_lblFocusGained

    private void log_submitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_log_submitKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER)
            log_submit.doClick();
    }//GEN-LAST:event_log_submitKeyPressed

    private void Reg_submitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Reg_submitKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER)
            log_submit.doClick();
    }//GEN-LAST:event_Reg_submitKeyPressed

    private void setter_saveKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_setter_saveKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER)
            setter_save.doClick();
    }//GEN-LAST:event_setter_saveKeyPressed

    private void Reg_usrmblKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Reg_usrmblKeyTyped
        char c = evt.getKeyChar();
        if(!(Character.isDigit(c)||c==10) ){    //
            getToolkit().beep();
            evt.consume();
        }
        if ((Reg_usrmbl.getText() + evt.getKeyChar()).length() > 10) {
        evt.consume();
    }
    }//GEN-LAST:event_Reg_usrmblKeyTyped

    private void Reg_otpKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Reg_otpKeyTyped
        char c = evt.getKeyChar();
        if(!(Character.isDigit(c)||c==10) ){    //
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_Reg_otpKeyTyped

    private void help_checkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_help_checkActionPerformed
         if(!help_passf1.getText().isEmpty()){
            if(validity(help_passf1.getText())&&bracketbalance(help_passf1.getText())){
                String passexptd=passValue(StringValue(help_passf1.getText()));
                String entpass=new String(help_passckr.getPassword());
                if(entpass.equals(passexptd)){
                    help_clear.setText("Try Again");
                    help_expectedpass.setText(passexptd);
                      JLabel label = new JLabel("You have entered coorect password ");
                        label.setFont(new Font("Arial", Font.BOLD, 18));
                        JOptionPane.showMessageDialog(null,label,"Successful",JOptionPane.INFORMATION_MESSAGE);
                      
                }else{
                    help_clear.setText("Try Again");
                    help_expectedpass.setText(passexptd);
                    JLabel label = new JLabel("Password is incorrect !!!");
                    label.setFont(new Font("Arial", Font.BOLD, 18));
                    JOptionPane.showMessageDialog(this,label,"ERROR",JOptionPane.WARNING_MESSAGE);
                }
            }else{
                help_passf1.requestFocus();
                JLabel label = new JLabel("Password formate is not valid !!!");
                label.setFont(new Font("Arial", Font.BOLD, 18));
                JOptionPane.showMessageDialog(this,label,"ERROR",JOptionPane.WARNING_MESSAGE);
            }
        }else{
             help_passf1.requestFocus();
            JLabel label = new JLabel("Password cannot be empty");
            label.setFont(new Font("Arial", Font.BOLD, 18));
            JOptionPane.showMessageDialog(this,label,"ERROR",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_help_checkActionPerformed

    private void help_passf1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_help_passf1KeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER)
            help_passckr.requestFocus();
    }//GEN-LAST:event_help_passf1KeyPressed

    private void help_passckrKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_help_passckrKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER)
            help_check.doClick();
    }//GEN-LAST:event_help_passckrKeyPressed

    private void help_expectedpassKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_help_expectedpassKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER)
            help_clear.doClick();
    }//GEN-LAST:event_help_expectedpassKeyPressed

    private void help_closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_help_closeActionPerformed
        clck=false;
        switcher(passsetter);
        clck= true;
        clock(setter_crtm);
    }//GEN-LAST:event_help_closeActionPerformed

    private void helphint_lblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_helphint_lblMouseClicked
        help_passf1.setText("[<MM><+><yyyy>]Abc@12<hr>");
    }//GEN-LAST:event_helphint_lblMouseClicked

    private void setter_helpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_setter_helpMouseClicked
        clck=false;
        switcher(Help);
        try{
            sleep(1000);
        } catch (InterruptedException ex) {
                System.out.println("Some Distrubted me::");
                Logger.getLogger(DyR_Adv_Reserved.class.getName()).log(Level.SEVERE, null, ex);
            }
        clck=true;
        clock(help_crtm);
    }//GEN-LAST:event_setter_helpMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DyR_Adv_Reserved.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DyR_Adv_Reserved.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DyR_Adv_Reserved.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DyR_Adv_Reserved.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DyR_Adv_Reserved().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Help;
    private javax.swing.JPanel Help_DyThings;
    private javax.swing.JPanel QuickReg;
    private javax.swing.JLabel Reg_NewUsr_lbl;
    private javax.swing.JButton Reg_cancel;
    private javax.swing.JButton Reg_clear;
    private javax.swing.JTextField Reg_otp;
    private javax.swing.JLabel Reg_otp_lbl;
    private javax.swing.JButton Reg_submit;
    private javax.swing.JTextField Reg_usrid;
    private javax.swing.JLabel Reg_usrid_lbl;
    private javax.swing.JTextField Reg_usrmbl;
    private javax.swing.JLabel Reg_usrmbl_lbl;
    private javax.swing.JButton help_check;
    private javax.swing.JButton help_clear;
    private javax.swing.JButton help_close;
    private javax.swing.JLabel help_crtm;
    private javax.swing.JTextField help_expectedpass;
    private javax.swing.JLabel help_lbl;
    private javax.swing.JPasswordField help_passckr;
    private javax.swing.JLabel help_passckr_lbl;
    private javax.swing.JTextField help_passf1;
    private javax.swing.JLabel help_passf1_lbl;
    private javax.swing.JLabel help_passf2_lbl;
    private javax.swing.JLabel help_tmlbl;
    private javax.swing.JLabel helphint_lbl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JButton log_exit;
    private javax.swing.JPasswordField log_pass;
    private javax.swing.JLabel log_pass_lbl;
    private javax.swing.JLabel log_signup;
    private javax.swing.JButton log_submit;
    private javax.swing.JLabel log_usr_lbl;
    private javax.swing.JTextField log_usrid;
    private javax.swing.JLabel log_usrlog_lbl;
    private javax.swing.JPanel login;
    private javax.swing.JLabel login_crtm;
    private javax.swing.JLayeredPane lyrpnl;
    private javax.swing.JPanel passsetter;
    private javax.swing.JPanel setter_DyThings;
    private javax.swing.JButton setter_cancel;
    private javax.swing.JButton setter_clear;
    private javax.swing.JLabel setter_crtm;
    private javax.swing.JLabel setter_help;
    private javax.swing.JPasswordField setter_passckr;
    private javax.swing.JLabel setter_passckr_lbl;
    private javax.swing.JTextField setter_passf1;
    private javax.swing.JLabel setter_passf1_lbl;
    private javax.swing.JTextField setter_passf2;
    private javax.swing.JLabel setter_passf2_lbl;
    private javax.swing.JButton setter_save;
    private javax.swing.JLabel tmlbl;
    private javax.swing.JLabel welcome;
    private javax.swing.JLabel welcome1;
    // End of variables declaration//GEN-END:variables
}
